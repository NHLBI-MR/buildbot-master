# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from time import gmtime, strftime

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

###### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("docker-image-worker", "gadgetron"),
                worker.Worker("docker-image-worker2", "gadgetron"),
                worker.Worker("docker-image-worker3", "gadgetron"),
                worker.Worker("docker-image-worker4", "gadgetron"),
                worker.Worker("docker-image-worker5", "gadgetron"),
                worker.Worker("docker-image-worker6", "gadgetron"),
                worker.Worker("gtprep-worker", "gadgetron")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

all_repositories = {
    r'https://github.com/ismrmrd/ismrmrd.git': 'ismrmrd',
    r'https://github.com/gadgetron/gadgetron.git': 'gadgetron',
    r'https://github.com/ismrmrd/siemens_to_ismrmrd.git': 'siemens_to_ismrmrd',
    r'https://github.com/ismrmrd/ismrmrd-python.git': 'ismrmrd-python',
    r'https://github.com/ismrmrd/ismrmrd-python-tools.git': 'ismrmrd-python-tools',
    r'git@github.com:NHLBI-MR/gtprep.git':'gtprep',
    r'git@github.com:NHLBI-MR/sasha_hc.git':'sasha_hc',
    r'git@github.com:NHLBI-MR/gadgetron_Bartholomew.git':'gadgetron_Bartholomew'
}

def getTheCodeBases():
    codebases = {'ismrmrd': {'repository':'https://github.com/ismrmrd/ismrmrd.git',
                             'branch':'master',
                             'revision': None},
                 'gadgetron': {'repository':'https://github.com/gadgetron/gadgetron.git',
                               'branch':'master',
                               'revision': None},
                 'siemens_to_ismrmrd': {'repository':'https://github.com/ismrmrd/siemens_to_ismrmrd.git',
                                     'branch':'master',
                                     'revision': None},
                 'ismrmrd-python': {'repository':'https://github.com/ismrmrd/ismrmrd-python.git',
                                     'branch':'master',
                                     'revision': None},
                 'ismrmrd-python-tools': {'repository':'https://github.com/ismrmrd/ismrmrd-python-tools.git',
                                    'branch':'master',
                                    'revision': None},
                 'gtprep': {'repository':'git@github.com:NHLBI-MR/gtprep.git',
                                     'branch':'master',
                                     'revision': None},
                 'sasha_hc': {'repository':'git@github.com:NHLBI-MR/sasha_hc.git',
                                     'branch':'master',
                                     'revision': None},
                 'gadgetron_Bartholomew': {'repository':'git@github.com:NHLBI-MR/gadgetron_Bartholomew.git',
                                     'branch':'master',
                                     'revision': None}}

    return codebases

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

polling_interval = 60  # seconds
project = 'gadgetron'

c['change_source'] = []

c['change_source'].append(changes.GitPoller(
        project=project,
        repourl='https://github.com/ismrmrd/ismrmrd.git',
        workdir='gitpoller-ismrmrd-workdir',
        branches=['master'],
        pollinterval=polling_interval))

c['change_source'].append(changes.GitPoller(
        project=project,
        repourl='https://github.com/gadgetron/gadgetron.git',
        workdir='gitpoller-gadgetron-workdir',
        branches=['master'],
        pollinterval=polling_interval))

c['change_source'].append(changes.GitPoller(
        project=project,
        repourl='https://github.com/ismrmrd/ismrmrd-python.git',
        workdir='gitpoller-ismrmrd-python-workdir',
        branches=['master'],
        pollinterval=polling_interval))

c['change_source'].append(changes.GitPoller(
        project=project,
        repourl='https://github.com/ismrmrd/ismrmrd-python-tools.git',
        workdir='gitpoller-ismrmrd-python-tools-workdir',
        branches=['master'],
        pollinterval=polling_interval))

c['change_source'].append(changes.GitPoller(
        project=project,
        repourl='https://github.com/ismrmrd/siemens_to_ismrmrd.git',
        workdir='gitpoller-siemens_to_ismrmrd-workdir',
        branches=['master'],
        pollinterval=polling_interval))

c['change_source'].append(changes.GitPoller(
        project=project,
        repourl='git@github.com:NHLBI-MR/gtprep.git',
        workdir='gitpoller-gtprep-workdir',
        branches=['master'],
        pollinterval=polling_interval))
        
c['change_source'].append(changes.GitPoller(
        project=project,
        repourl='git@github.com:NHLBI-MR/sasha_hc.git',
        workdir='gitpoller-sasha_hc-workdir',
        branches=['master'],
        pollinterval=polling_interval))

c['change_source'].append(changes.GitPoller(
        project=project,
        repourl='git@github.com:NHLBI-MR/gadgetron_Bartholomew.git',
        workdir='gitpoller-Bartholomew-workdir',
        branches=['master'],
        pollinterval=polling_interval))

####### SCHEDULERS

gtrepos_filter = [u'https://github.com/ismrmrd/ismrmrd.git',
                  u'https://github.com/gadgetron/gadgetron.git',
                  u'https://github.com/ismrmrd/siemens_to_ismrmrd.git',
                  u'https://github.com/ismrmrd/ismrmrd-python.git',
                  u'https://github.com/ismrmrd/ismrmrd-python-tools.git']

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="gadgetron_scheduler",
                            change_filter=util.ChangeFilter(project='gadgetron', repository=gtrepos_filter,branch='master'),
                            treeStableTimer=60,
                            codebases=getTheCodeBases(),
                            builderNames=["gadgetron_docker_image_builder_no_cuda"]))

# --------------------------------------------------------

#image_sch75 = schedulers.SingleBranchScheduler(
#    name="gadgetron_img75_scheduler",
#    change_filter=util.ChangeFilter(project='gadgetron', repository=gtrepos_filter, branch='master'),
#    treeStableTimer=60,
#    codebases=getTheCodeBases(),
#    builderNames=["gadgetron_docker_image_builder_cuda75",])

image_sch80 = schedulers.SingleBranchScheduler(
    name="gadgetron_img80_scheduler",
    change_filter=util.ChangeFilter(project='gadgetron', repository=gtrepos_filter, branch='master'),
    treeStableTimer=60,
    codebases=getTheCodeBases(),
    builderNames=["gadgetron_docker_image_builder_cuda80",])

#c['schedulers'].append(image_sch75)
c['schedulers'].append(image_sch80)

# --------------------------------------------------------

image_sch80_cudnn = schedulers.SingleBranchScheduler(
    name="gadgetron_img80_cudnn_scheduler",
    change_filter=util.ChangeFilter(project='gadgetron', repository=gtrepos_filter, branch='master'),
    treeStableTimer=60,
    codebases=getTheCodeBases(),
    builderNames=["gadgetron_docker_image_builder_cuda80_cudnn6",])

c['schedulers'].append(image_sch80_cudnn)

# --------------------------------------------------------

c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    codebases=[
        util.CodebaseParameter(
            codebase="gadgetron",
            branch="master",
            revision="",
            repository="https://github.com/gadgetron/gadgetron.git",
            project="gadgetron"
        ),
    ],
    builderNames=["gadgetron_docker_image_builder_no_cuda", "gadgetron_docker_image_builder_cuda80", "gadgetron_docker_image_builder_cuda80_cudnn6"]))

## --------------------------------------------------------------------------------------------------------------

c['schedulers'].append(schedulers.ForceScheduler(
    codebases=[
        util.CodebaseParameter(
            codebase="gadgetron_Bartholomew",
            branch="master",
            revision="",
            repository=u'git@github.com:NHLBI-MR/gadgetron_Bartholomew.git',
            project="gadgetron"
        ),
        util.CodebaseParameter(
            codebase="sasha_hc",
            branch="master",
            revision="",
            repository=u'git@github.com:NHLBI-MR/sasha_hc.git',
            project="gadgetron"
        ),
        util.CodebaseParameter(
            codebase="gtprep",
            branch="master",
            revision="",
            repository=u'git@github.com:NHLBI-MR/gtprep.git',
            project="gadgetron"
        ),
       util.CodebaseParameter(
            codebase="gadgetron",
            branch="master",
            revision="",
            repository="https://github.com/gadgetron/gadgetron.git",
            project="gadgetron"
        ),
    ],
    name="force_scheduler_gtprep",
    builderNames=["gtprep_builder80", "gtprep_cpu_builder80", "gtprep_cpu_stripped_builder80", "gtprep_cpu_no_mkl_builder80"]))


#gtprep_dep_sch55 = schedulers.Dependent(name="gtprep_dependent_scheduler55",
#                                        upstream=image_sch55,
#                                        codebases=getTheCodeBases(),
#                                        builderNames=["gtprep_builder55"])

#gtprep_dep_sch75 = schedulers.Dependent(name="gtprep_dependent_scheduler75",
#                                        upstream=image_sch75,
#                                        codebases=getTheCodeBases(),
#                                        builderNames=["gtprep_builder75"])

#c['schedulers'].append(gtprep_dep_sch55)
#c['schedulers'].append(gtprep_dep_sch75)

gtprep_repos_filter = [u'https://github.com/ismrmrd/ismrmrd.git',
                  u'https://github.com/gadgetron/gadgetron.git',
                  u'https://github.com/ismrmrd/siemens_to_ismrmrd.git',
                  u'https://github.com/ismrmrd/ismrmrd-python.git',
                  u'https://github.com/ismrmrd/ismrmrd-python-tools.git',
                  u'git@github.com:NHLBI-MR/gtprep.git',
                  u'git@github.com:NHLBI-MR/sasha_hc.git',     
                  u'git@github.com:NHLBI-MR/gadgetron_Bartholomew.git']

c['schedulers'].append(schedulers.SingleBranchScheduler(
        name="gtprep_scheduler",
        change_filter=util.ChangeFilter(project='gadgetron',repository=gtprep_repos_filter, branch='master'),
        treeStableTimer=60,
        codebases=getTheCodeBases(),
        builderNames=["gtprep_builder80", "gtprep_cpu_builder80", "gtprep_cpu_stripped_builder80", "gtprep_cpu_no_mkl_builder80"]))

## ----------------------------------------------------------------------

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

def make_docker_gtprep_factory(base_image, tag, docker_file, tarfile_folder, use_gpu, strip_image, container_name='gtprep_test_container', run_gt_test=False):
    factory = util.BuildFactory()
 
    # --------------------------------------------------------
    # checkout gadgetron source
    factory.addStep(steps.Git(repourl='https://github.com/gadgetron/gadgetron.git', workdir='gadgetron-source', branch='master', mode='incremental', codebase='gadgetron', haltOnFailure=True))
 
    # --------------------------------------------------------
    # checkout gtprep source
    factory.addStep(steps.Git(repourl='git@github.com:NHLBI-MR/gtprep.git', workdir='gtprep-source', branch='master', mode='incremental', codebase='gtprep', haltOnFailure=True))   
    factory.addStep(steps.ShellCommand(command='cp gadgetron-source/test/integration/*.py gtprep-source/test/integration/', workdir=util.Interpolate('%(prop:builddir)s'), haltOnFailure=True))

    factory.addStep(steps.Git(repourl='git@github.com:NHLBI-MR/gtprep.git', workdir='gtprep-source2', branch='master', mode='incremental', codebase='gtprep', haltOnFailure=True))
    factory.addStep(steps.ShellCommand(command='cp gadgetron-source/test/integration/*.py gtprep-source2/test/integration/', workdir=util.Interpolate('%(prop:builddir)s'), haltOnFailure=True))
    
    # --------------------------------------------------------
    # checkout sasha_hc source
    factory.addStep(steps.Git(repourl='git@github.com:NHLBI-MR/sasha_hc.git', workdir='sasha_hc-source', branch='master', mode='incremental', codebase='sasha_hc', haltOnFailure=True))
    
    # factory.addStep(steps.ShellCommand(command='cp gadgetron-source/test/integration/*.py sasha_hc-source/test/integration/', workdir=util.Interpolate('%(prop:builddir)s'), haltOnFailure=True))

    # --------------------------------------------------------
    # checkout gadgetron_Bartholomew source
    factory.addStep(steps.Git(repourl='git@github.com:NHLBI-MR/gadgetron_Bartholomew.git', workdir='gadgetron_Bartholomew-source', branch='master', mode='incremental', codebase='gadgetron_Bartholomew', haltOnFailure=True))
    
    # --------------------------------------------------------
    # pull base docker image
    factory.addStep(steps.ShellCommand(command=['docker', 'pull', base_image],  haltOnFailure=True))
 
    # acquire Gadgetron integration test data (2 hour timeout - slowly downloads 8 GBs from Amazon S3)
    if run_gt_test:
        factory.addStep(steps.ShellCommand(command='python get_data.py', workdir='gadgetron-source/test/integration', timeout=7200, haltOnFailure=True))

    # acquire gtprep integration test data
    factory.addStep(steps.ShellCommand(command='python get_data.py', workdir='gtprep-source2/test/integration', timeout=7200, haltOnFailure=True))
    
    # --------------------------------------------------------
    # build gtprep  
    factory.addStep(steps.ShellCommand(command=['docker', 'build', '--no-cache', '--force-rm', '-t', tag, '-f', docker_file, '.'], workdir='.', haltOnFailure=True))
    #factory.addStep(steps.ShellCommand(command=['docker', 'build', '--force-rm', '-t', tag, '-f', docker_file, '.'], workdir='.', haltOnFailure=True))

    # --------------------------------------------------------
    # strip image
    tag_used = tag
    if strip_image:
        tag_used = tag + '_stripped'
        factory.addStep(steps.ShellCommand(command=['./strip_docker_image', tag, tag_used], workdir='gadgetron-source/docker', haltOnFailure=True))
    
    # --------------------------------------------------------
    # run gadgetron
    if run_gt_test:
        if use_gpu:
            factory.addStep(steps.ShellCommand(command=['docker', 'run', '--runtime=nvidia', '--detach', util.Interpolate('--volume=%(prop:builddir)s/gadgetron-source/test/integration:/opt/integration'), '--name=' + container_name,  tag_used], workdir='gadgetron-source', env={'GPU': '0', 'NV_GPU': '0'}, haltOnFailure=True))
        else:
            factory.addStep(steps.ShellCommand(command=['docker', 'run', '--detach', util.Interpolate('--volume=%(prop:builddir)s/gadgetron-source/test/integration:/opt/integration'), '--name=' + container_name,  tag_used], workdir='gadgetron-source', env={'GPU': '0', 'NV_GPU': '0'}, haltOnFailure=True))
        

        factory.addStep(steps.ShellCommand(command=['docker', 'exec', '-i', container_name, '/bin/bash', '-c', 'cd /opt/integration/ && python run_all_tests.py /opt/code/gadgetron/test/integration/test_cases.txt'],
                                 logfiles={'gadgetronlog': 'gadgetron.log','clientlog':'client.log'},
                                 description='Integration Tests',
                                 workdir='gadgetron-source/test/integration',
                                       timeout=1200, haltOnFailure=True))

        factory.addStep(steps.ShellCommand(command=['docker', 'stop', container_name], haltOnFailure=False, alwaysRun=True))
        factory.addStep(steps.ShellCommand(command=['docker', 'rm', container_name], haltOnFailure=False, alwaysRun=True))


    if use_gpu:
        #factory.addStep(steps.ShellCommand(command=['docker', 'run', '--runtime=nvidia', '--detach', util.Interpolate('--volume=%(prop:builddir)s/gtprep-source/test/integration:/opt/integration'), util.Interpolate('--volume=%(prop:builddir)s/gtprep_data:/opt/integration/data'), '--name=' + container_name,  tag_used], workdir='gadgetron-source', env={'GPU': '0', 'NV_GPU': '0'}, haltOnFailure=True))
        factory.addStep(steps.ShellCommand(command=['docker', 'run', '--runtime=nvidia', '--detach', util.Interpolate('--volume=%(prop:builddir)s/gtprep-source2/test/integration:/opt/integration'), '--name=' + container_name + '_gtprep',  tag_used], workdir='gadgetron-source', env={'GPU': '0', 'NV_GPU': '0'}, haltOnFailure=True))
    else:
        factory.addStep(steps.ShellCommand(command=['docker', 'run', '--detach', util.Interpolate('--volume=%(prop:builddir)s/gtprep-source2/test/integration:/opt/integration'), '--name=' + container_name + '_gtprep',  tag_used], workdir='gadgetron-source', env={'GPU': '0', 'NV_GPU': '0'}, haltOnFailure=True))
        
 
    factory.addStep(steps.ShellCommand(command=['docker', 'exec', '-i', container_name + '_gtprep', '/bin/bash', '-c', 'cd /opt/integration/ && python run_all_tests.py /opt/code/test_cases.txt'],
                                       logfiles={'gadgetronlog': 'gadgetron.log','clientlog':'client.log'},
                                       description='Integration Tests',
                                       workdir='gtprep-source/test/integration',
                                       timeout=1200, haltOnFailure=True))

    factory.addStep(steps.ShellCommand(command=['docker', 'stop', container_name+'_gtprep'], haltOnFailure=False, alwaysRun=True))
    factory.addStep(steps.ShellCommand(command=['docker', 'rm', container_name+'_gtprep'], haltOnFailure=False, alwaysRun=True))

    if strip_image:
        factory.addStep(steps.ShellCommand(command=['docker', 'rmi', tag], haltOnFailure=False, alwaysRun=True))

    factory.addStep(steps.ShellCommand(command=['./tag_image_with_version.sh', tag_used], workdir='gadgetron-source/docker', haltOnFailure=False))
    factory.addStep(steps.ShellCommand(command=['docker','push',tag_used],haltOnFailure=True))
    factory.addStep(steps.ShellCommand(command=['./remove_all_but_latest.sh', tag_used], workdir='gadgetron-source/docker', haltOnFailure=False, warnOnFailure=True))

    return factory


def make_docker_image_generator_factory(base_image, docker_config_path, tag, rest_port, container_name='buildbot_test_container'):
    factory = util.BuildFactory()

    #Make sure we have the base image
    factory.addStep(steps.ShellCommand(command=['docker', 'pull', base_image], haltOnFailure=True))


    # check out the Gadgetron source
    factory.addStep(steps.Git(repourl='https://github.com/gadgetron/gadgetron.git', workdir='gadgetron-source', branch='master', mode='incremental', codebase='gadgetron', haltOnFailure=True))

    factory.addStep(steps.ShellCommand(command=['docker', 'build', '--no-cache', '--force-rm', '-t', tag, '.'], workdir='gadgetron-source'+docker_config_path, haltOnFailure=True))
    #factory.addStep(ShellCommand(command=['docker', 'build', '-t', tag, '.'], workdir='gadgetron-source'+docker_config_path, haltOnFailure=True))

    # acquire Gadgetron integration test data (2 hour timeout - slowly downloads 8 GBs from Amazon S3)
    factory.addStep(steps.ShellCommand(command='python get_data.py', workdir='gadgetron-source/test/integration', timeout=7200, haltOnFailure=True))

    #Start Docker container
    factory.addStep(steps.ShellCommand(command=['docker/nvidia-docker', 'run', '--detach', 
                                          util.Interpolate('--volume=%(prop:builddir)s/gadgetron-source/test/integration:/opt/integration'),
                                                '--name=' + container_name,  tag], 
                                 workdir='gadgetron-source', env={'GPU': '0', 'NV_GPU': '0'}, haltOnFailure=True))


    factory.addStep(steps.ShellCommand(command=['docker','exec','-i', container_name, '/opt/code/gadgetron/build/test/test_all']))

    factory.addStep(steps.ShellCommand(command=['docker', 'exec', '-i', container_name, '/bin/bash', '-c', 'cd /opt/integration/ && python run_all_tests.py /opt/code/gadgetron/test/integration/test_cases.txt'],
                                 logfiles={'gadgetronlog': 'gadgetron.log','clientlog':'client.log'},
                                 description='Integration Tests',
                                 workdir='gadgetron-source/test/integration',
                                       timeout=1800,                                 haltOnFailure=True))

    factory.addStep(steps.ShellCommand(command=['./tag_image_with_version.sh', tag], workdir='gadgetron-source/docker', haltOnFailure=False))
    factory.addStep(steps.ShellCommand(command=['docker','push',tag],haltOnFailure=True))

    #Stop and delete container
    factory.addStep(steps.ShellCommand(command=['docker', 'stop', container_name], haltOnFailure=False, alwaysRun=True))
    factory.addStep(steps.ShellCommand(command=['docker', 'rm', container_name], haltOnFailure=False, alwaysRun=True))

    factory.addStep(steps.ShellCommand(command=['./remove_all_but_latest.sh', tag], workdir='gadgetron-source/docker', haltOnFailure=False))

    return factory

build_lock = util.WorkerLock("slave_builds", maxCount = 10)
gtprep_build_lock = util.WorkerLock("gtprep_slave_builds", maxCount = 10)
worker2_build_lock = util.WorkerLock("worker2_slave_builds", maxCount = 10)
worker3_build_lock = util.WorkerLock("worker3_slave_builds", maxCount = 10)
worker4_build_lock = util.WorkerLock("worker4_slave_builds", maxCount = 10)
worker5_build_lock = util.WorkerLock("worker5_slave_builds", maxCount = 10)
worker6_build_lock = util.WorkerLock("worker6_slave_builds", maxCount = 10)

c['builders'] = []

factory = make_docker_image_generator_factory("gadgetron/ubuntu1604_base", "/docker/incremental/ubuntu_1604_no_cuda","gadgetron/ubuntu_1604_no_cuda", 9902,"buildbot_gadgetron_no_cuda_test")
c['builders'].append(
    util.BuilderConfig(name="gadgetron_docker_image_builder_no_cuda",
                       slavenames=["docker-image-worker5"],
                       factory=factory, locks=[worker5_build_lock.access('exclusive')]))


#factory = make_docker_image_generator_factory("gadgetron/ubuntu1604_cuda75_base", "/docker/incremental/ubuntu_1604_cuda75","gadgetron/ubuntu_1604_cuda75", 9902,"buildbot_gadgetron_cuda75_test")
#c['builders'].append(
#    util.BuilderConfig(name="gadgetron_docker_image_builder_cuda75",
#                       slavenames=["docker-image-worker"],
#                       factory=factory, locks=[build_lock.access('exclusive')]))


factory = make_docker_image_generator_factory("gadgetron/ubuntu1604_cuda80_base", "/docker/incremental/ubuntu_1604_cuda80","gadgetron/ubuntu_1604_cuda80", 9902,"buildbot_gadgetron_cuda80_test2")
c['builders'].append(
    util.BuilderConfig(name="gadgetron_docker_image_builder_cuda80",
                       slavenames=["docker-image-worker5"],
                       factory=factory, locks=[worker5_build_lock.access('exclusive')]))

factory = make_docker_image_generator_factory("gadgetron/ubuntu1604_cuda80_cudnn6_base", "/docker/incremental/ubuntu_1604_cuda80_cudnn6","gadgetron/ubuntu_1604_cuda80_cudnn6", 9902,"buildbot_gadgetron_cuda80_cudnn6_test")
c['builders'].append(
    util.BuilderConfig(name="gadgetron_docker_image_builder_cuda80_cudnn6",
                       slavenames=["docker-image-worker5"],
                       factory=factory, locks=[worker5_build_lock.access('exclusive')]))

# -----------------------------------------------------------------------------------------------------


curr_moment = strftime("%Y-%m-%d-%H-%M-%S", gmtime())

factory = make_docker_gtprep_factory("gadgetron/ubuntu1604_cuda80_cudnn6_base", "xueh2/gadgetron_ubuntu1604_cuda_gtprep", "gtprep-source/docker/incremental_ubuntu_1604/gtprep_sasha_hc_Bartholomew_cuda80_mkl/Dockerfile", '/home/GADGETRON_CUDA80/', 1, 0, 'gtprep_test_container80'+curr_moment, False)
c['builders'].append(
    util.BuilderConfig(name="gtprep_builder80",
                       slavenames=["docker-image-worker5"],
                       factory=factory, locks=[worker5_build_lock.access('exclusive')]))

factory = make_docker_gtprep_factory("gadgetron/ubuntu1604_base", "xueh3/gadgetron_ubuntu1604_gtprep", "gtprep-source/docker/incremental_ubuntu_1604/gtprep_sasha_hc_Bartholomew/Dockerfile", '/home/GADGETRON_CUDA80/', 0, 0, 'gtprep_test_container80_cpu'+curr_moment, False)
c['builders'].append(
    util.BuilderConfig(name="gtprep_cpu_builder80",
                       slavenames=["docker-image-worker2"],
                       factory=factory, locks=[worker2_build_lock.access('exclusive')]))

factory = make_docker_gtprep_factory("gadgetron/ubuntu1604_base", "hxue/gadgetron_ubuntu1604_gtprep", "gtprep-source/docker/incremental_ubuntu_1604/gtprep_sasha_hc_Bartholomew/Dockerfile", '/home/GAGETRON_CUDA80/', 0, 1, 'gtprep_test_container80_cpu_stripped'+curr_moment, False)
c['builders'].append(
    util.BuilderConfig(name="gtprep_cpu_stripped_builder80",
                       slavenames=["docker-image-worker4"],
                       factory=factory, locks=[worker4_build_lock.access('exclusive')]))

factory = make_docker_gtprep_factory("gadgetron/ubuntu1604_base", "xueh5/gadgetron_ubuntu1604_gtprep_no_mkl", "gtprep-source/docker/incremental_ubuntu_1604/gtprep_sasha_hc_Bartholomew/Dockerfile", '/home/GADGETRON_CUDA80/', 0, 0, 'gtprep_test_container80_cpu_no_mkl'+curr_moment, False)
c['builders'].append(
    util.BuilderConfig(name="gtprep_cpu_no_mkl_builder80",
                       slavenames=["docker-image-worker6"],
                       factory=factory, locks=[worker6_build_lock.access('exclusive')]))


#factory = make_docker_gtprep_factory("gadgetron/ubuntu_1604_cuda55", "hansenms/gadgetron_ubuntu1604_cuda_gtprep55", "gtprep-source/docker/incremental_ubuntu_1604/gtprep_cuda55_mkl/Dockerfile", '/home/GADGETRON_CUDA55/', container_name='gtprep_test_container55')
#c['builders'].append(
#    util.BuilderConfig(name="gtprep_builder55",
#                       slavenames=["gtprep-worker"],
#                       factory=factory, locks=[gtprep_build_lock.access('exclusive')]))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

mn = reporters.MailNotifier(fromaddr="hui.xue@nih.gov",
                            sendToInterestedUsers=True,
                            extraRecipients=["hui.xue@nih.gov"],
                            relayhost="smtp.sendgrid.net", smtpPort=587,
                            smtpUser="azure_a614ae23848cece6c7ae835652851c04@azure.com",
                            smtpPassword="Gadg3tr0n!")

c['services'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Gadgetron"
c['titleURL'] = "https://github.com/gadgetron/gadgetron"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://gtbuildbot.eastus.cloudapp.azure.com:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}))

authz = util.Authz(
      allowRules=[
              util.AnyEndpointMatcher(role="gadgetron")
            ],
      roleMatchers=[
              util.RolesFromGroups()
            ]
    )
auth=util.GitHubAuth('10b9eeffb0a37d6efc4b', 'e2766b00ab59c894d25132e5def6e91a02aa3d9c')

c['www']['auth'] = auth
c['www']['authz'] = authz

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
